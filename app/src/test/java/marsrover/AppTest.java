/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package marsrover;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvFileSource;
import org.junit.jupiter.params.provider.CsvSource;

import java.util.function.IntPredicate;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @DisplayName("Given a single rover, when received commands, then the rover's position is updated.")
    @org.junit.jupiter.params.ParameterizedTest
    @org.junit.jupiter.params.provider.CsvFileSource(resources = "/001WithInputsSingleRoverAndExpectedResults")
    void Test01(int startX, int startY, String startAngle, String commands,
                int endX, int endY,String endAngle) {

        int angleStart = Cardinal.valueOf(startAngle).getAngle();
        int angleEnds = Cardinal.valueOf(endAngle).getAngle();
        Rover rover1 =  new Rover(startX, startY,angleStart);

        for (int i = 0; i <commands.length() ; i++) {
            String currentCommand = String.valueOf(commands.charAt(i));
            var command = Commands.valueOf(currentCommand);
            command.applyToVehicule(rover1);
        }

        assertEquals(endX, rover1.getX());
        assertEquals(endY, rover1.getY());
        assertEquals(angleEnds,rover1.getAngle());

    }

    @DisplayName("Given an area, test that created a rover is allowed")
    @ParameterizedTest
    @CsvSource({"5,5,N,2,2, true",
                "5,10,N,1,6, true",
                 "10,10,N,12,12, false"})
    void testName(int xArea, int yArea,String roverAngle, int xCoordinate, int yCoordinate, boolean result) {
        //Arrange
        IntPredicate rangeX = x -> (x>=0 && x <= xArea);
        IntPredicate rangeY = y -> (y>=0 && y<= yArea);
        Area plateau = new Area(rangeX,rangeY);
        boolean roverXCoorIsAllowed = plateau.getValidX().test(xCoordinate);
        boolean roverYCoorIsAllowed = plateau.getValidY().test(yCoordinate);
        assertEquals(result, roverXCoorIsAllowed && roverYCoorIsAllowed, ()-> "Coordinates are not valid");

      /*  if(roverXCoorIsAllowed && roverYCoorIsAllowed){
            int angle = Cardinal.valueOf(roverAngle).getAngle();
            Rover rover1 = new Rover(angle, xCoordinate, yCoordinate);
        }
*/


    }




}
